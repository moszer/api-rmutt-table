import { Cheerio, CheerioAPI, Element } from "cheerio";
import { Course, Task, User, Fetch, Options } from "./types/types";
export declare class Moodle {
    url: string;
    fetch: Fetch;
    cookies: string | undefined;
    user: User | null;
    courses: Array<Course>;
    tasks: Array<Task>;
    /**
     * Creates a new scraper instance for a certain Moodle site
     * @param { Fetch }     fetch   The fetch method to use (e.g. undici or the built-in global fetch)
     * @param { string }    url     URL of the Moodle site
     * @example const moodle = new Moodle(fetch, "https://examplesite.com");
     */
    constructor(fetch: Fetch, url: string);
    appendToURL(path?: string): string;
    /**
     *
     * @param { string } username
     * @param { string } password
     * @param { Options } options Extra login options
     * @param { boolean } options.refresh  Whether to call Moodle.refresh() automatically after logging in
     * @param { string } options.loginFormPath  If the login form is not located in the url index, this can be set to the form location
     *
     * @example moodle.login('username', 'password', {refresh: true, loginFormPath: 'login/index.php'})
     */
    login(username: string, password: string, options?: Options): Promise<boolean>;
    getCourseAndDate(anchors: Cheerio<Element>, $: CheerioAPI): {
        date?: Date | undefined;
        course?: Course | undefined;
    };
    /**
     * Fetches the user data and stores them in the Moodle instance
     * @param cookies optional
     * @param { boolean } options.navCourses  Gets all courses from the 'My Courses' dropdown menu in the navbar, optional
     */
    refresh(cookies?: string | undefined, options?: {
        navCourses?: boolean;
    }): Promise<boolean>;
}
