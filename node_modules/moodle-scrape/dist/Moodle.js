"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Moodle = void 0;
const cheerio_1 = require("cheerio");
const defaultOptions = {
    refresh: true,
};
const UnixTimestampRate = 1000;
class Moodle {
    /**
     * Creates a new scraper instance for a certain Moodle site
     * @param { Fetch }     fetch   The fetch method to use (e.g. undici or the built-in global fetch)
     * @param { string }    url     URL of the Moodle site
     * @example const moodle = new Moodle(fetch, "https://examplesite.com");
     */
    constructor(fetch, url) {
        this.fetch = fetch;
        this.url = url.endsWith("/") ? url.slice(0, -1) : url;
        this.cookies = undefined;
        this.user = null;
        this.courses = [];
        this.tasks = [];
    }
    appendToURL(path = "") {
        let separator = "/";
        if (path.startsWith(separator) || this.url.endsWith(separator)) {
            separator = "";
        }
        return `${this.url}${separator}${path}`;
    }
    /**
     *
     * @param { string } username
     * @param { string } password
     * @param { Options } options Extra login options
     * @param { boolean } options.refresh  Whether to call Moodle.refresh() automatically after logging in
     * @param { string } options.loginFormPath  If the login form is not located in the url index, this can be set to the form location
     *
     * @example moodle.login('username', 'password', {refresh: true, loginFormPath: 'login/index.php'})
     */
    async login(username, password, options = defaultOptions) {
        var _a, _b;
        const form = new URLSearchParams();
        form.append("username", username);
        form.append("password", password);
        const loginForm = this.appendToURL(options.loginFormPath);
        let res = await this.fetch(loginForm);
        const body = await res.text();
        const $ = (0, cheerio_1.load)(body);
        form.append("logintoken", $("[name='logintoken']")[0].attribs.value);
        res = await this.fetch(this.appendToURL("/login/index.php"), {
            headers: {
                cookie: ((_a = res.headers
                    .get("set-cookie")) === null || _a === void 0 ? void 0 : _a.split("Secure, ").find((c) => c.startsWith("MoodleSession"))) || "",
            },
            method: "POST",
            body: form,
            redirect: "manual",
            credentials: "include",
        });
        this.cookies = (_b = res.headers
            .get("set-cookie")) === null || _b === void 0 ? void 0 : _b.split("Secure, ").find((c) => c.startsWith("MoodleSession"));
        if (this.cookies && options.refresh === true) {
            await this.refresh();
        }
        return !!this.cookies;
    }
    getCourseAndDate(anchors, $) {
        const res = {};
        anchors.map((_, el) => {
            if (typeof el.attribs["href"] === "undefined")
                return;
            const href = el.attribs["href"];
            if (href === null || href === void 0 ? void 0 : href.includes("calendar")) {
                const timeParams = href.match(/time=\d*/);
                if (!timeParams || (timeParams === null || timeParams === void 0 ? void 0 : timeParams.length) === 0)
                    return;
                const timeString = timeParams[0].split("=").pop();
                if (!timeString)
                    return;
                res.date = new Date(parseInt(timeString) * UnixTimestampRate);
            }
            if (href === null || href === void 0 ? void 0 : href.includes("course")) {
                const courseParams = href.match(/id=\d*/);
                if (!courseParams || (courseParams === null || courseParams === void 0 ? void 0 : courseParams.length) === 0)
                    return;
                const idString = courseParams[0].split("=").pop();
                if (!idString)
                    return;
                res.course = {
                    id: parseInt(idString),
                    name: $(el).text() || "",
                    taskIds: [],
                };
            }
        });
        return res;
    }
    /**
     * Fetches the user data and stores them in the Moodle instance
     * @param cookies optional
     * @param { boolean } options.navCourses  Gets all courses from the 'My Courses' dropdown menu in the navbar, optional
     */
    async refresh(cookies = this.cookies, options) {
        var _a;
        const res = await this.fetch(`${this.url}/calendar/view.php?view=upcoming`, {
            headers: { cookie: cookies || "" },
        });
        const body = await res.text();
        const $ = (0, cheerio_1.load)(body);
        const courses = new Map();
        try {
            if (options === null || options === void 0 ? void 0 : options.navCourses) {
                $(".mycourses:first li > a").map((_, el) => {
                    const id = parseInt(el.attribs.href.split("?id=")[1]);
                    if (courses.has(id))
                        return;
                    const course = {
                        id,
                        name: $(el).text() || "",
                        taskIds: [],
                    };
                    courses.set(id, course);
                });
            }
            this.tasks = $(".event")
                .map((_, el) => {
                const description = $(".description-content", el).first().text();
                const anchors = $("a", el);
                const { date, course: retrievedCourse } = this.getCourseAndDate(anchors, $);
                if (!retrievedCourse)
                    return;
                if (!courses.has(retrievedCourse.id)) {
                    courses.set(retrievedCourse.id, retrievedCourse);
                }
                const course = courses.get(retrievedCourse.id);
                const task = {
                    id: parseInt(el.attribs["data-event-id"]),
                    name: el.attribs["data-event-title"],
                    description,
                    deadline: date,
                    courseId: course === null || course === void 0 ? void 0 : course.id,
                };
                course === null || course === void 0 ? void 0 : course.taskIds.push(task.id);
                return task;
            })
                .toArray();
            this.courses = Array.from(courses.values());
            this.user = {
                id: parseInt((_a = $(".theme-loginform-form > a")
                    .attr("href")) === null || _a === void 0 ? void 0 : _a.split("?id=")[1]),
                name: $(".usertext").text(),
                picture: $(".welcome_userpicture").attr("src"),
            };
            return true;
        }
        catch (err) {
            console.log(err);
            return false;
        }
    }
}
exports.Moodle = Moodle;
